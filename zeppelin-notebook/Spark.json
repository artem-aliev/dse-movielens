{"paragraphs":[{"text":"import com.datastax.bdp.graph.spark.graphframe._\nimport org.graphframes._\n\n// Get the same data we had before into Spark.\n// This is Datastax Spark/Graph integration. It support both TinkerPop and\n// GraphFrames for the same source\nval g: GraphFrame = spark.dseGraph(\"movielens\").cache","user":"anonymous","dateUpdated":"2017-11-05T15:26:20+0000","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.datastax.bdp.graph.spark.graphframe._\nimport org.graphframes._\ng: org.graphframes.GraphFrame = GraphFrame(v:[id: string, ~label: string ... 8 more fields], e:[src: string, dst: string ... 4 more fields])\n"}]},"apps":[],"jobName":"paragraph_1507215302693_653960017","id":"20171005-175502_1259936314","dateCreated":"2017-10-05T17:55:02+0100","dateStarted":"2017-11-05T15:26:20+0000","dateFinished":"2017-10-26T15:09:32+0100","status":"PENDING","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2801"},{"text":"// Simple counts are fast and easy\n// GraphFrames are just pair of vertices and edges dataframes.\n// Thus all dataframe methods could be applied to them\ng.vertices.count\ng.edges.count","user":"anonymous","dateUpdated":"2017-10-24T19:34:53+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res25: Long = 9962\nres26: Long = 1012657\n"}]},"apps":[],"jobName":"paragraph_1507630410844_-694522768","id":"20171010-131330_1975195350","dateCreated":"2017-10-10T13:13:30+0100","dateStarted":"2017-10-13T17:36:23+0100","dateFinished":"2017-10-13T17:36:46+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2802"},{"text":"// Vertices dataframe should have 'id' columns. \ng.vertices.show(3)\n// Edges one should have 'src' and 'dst' columns. All three names are hardcoded\ng.edges.show(3)\n// No support for vertex types, thus I added '~label' column to support them.","user":"anonymous","dateUpdated":"2017-10-24T19:35:40+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+------+------------+---------+------+----+-------+---+----+----+\n|                  id|~label|community_id|member_id|gender| _id|zipcode|age|name|year|\n+--------------------+------+------------+---------+------+----+-------+---+----+----+\n|user:Wos5AAAAAAAA...|  user|  1519073536|      332|     M|3457|  19083| 25|null|null|\n|user:Wos5AAAAAAAA...|  user|  1519073536|      333|     M|3458|  02131| 45|null|null|\n|user:Wos5AAAAAAAA...|  user|  1519073536|      334|     M|3459|  76266| 18|null|null|\n+--------------------+------+------------+---------+------+----+-------+---+----+----+\nonly showing top 3 rows\n\n+--------------------+--------------------+----------+--------------------+--------------------+-----+\n|                 src|                 dst|    ~label|                  id|           timestamp|stars|\n+--------------------+--------------------+----------+--------------------+--------------------+-----+\n|user:Wos5AAAAAAAA...|occupation:JZeRAA...|occupation|83839c31-a78c-11e...|                null| null|\n|user:Wos5AAAAAAAA...|movie:AGakAAAAAAA...|     rated|86cb90b1-a78b-11e...|1970-01-12 07:40:...|    2|\n|user:Wos5AAAAAAAA...|movie:AGakAAAAAAA...|     rated|86cbb7c0-a78b-11e...|1970-01-12 07:40:...|    1|\n+--------------------+--------------------+----------+--------------------+--------------------+-----+\nonly showing top 3 rows\n\n"}]},"apps":[],"jobName":"paragraph_1507878162550_1831619845","id":"20171013-100242_1559744877","dateCreated":"2017-10-13T10:02:42+0100","dateStarted":"2017-10-13T17:37:23+0100","dateFinished":"2017-10-13T17:37:24+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2803"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1507878693358_1892573280","id":"20171013-101133_1233949253","dateCreated":"2017-10-13T10:11:33+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2804"},{"text":"// Traversals with GraphFrames are done with \"motif finding language\"\n// A sequence of patterns in the form of vertex to edge to vertex triplets\n// All patterns have named variables that are mapped in a result dataframe struct column\n\n// This is the same request I used before:\n// What are programmers watching\n// But it's longer. 325 vs 136 symbols\ng.find(\"\"\"\n    (user)-[occupation_e]->(occupation);\n    (user)-[rated_e]->(movie);\n    (movie)-[genre_e]->(genre)\n    \"\"\").filter (\"\"\"\n    occupation.name = \"programmer\"\n    and occupation_e.`~label` = \"occupation\"\n    and rated_e.`~label` = \"rated\"\n    and genre_e.`~label` = \"genre\"\n    \"\"\" ).groupBy(\"genre.name\").count().show","user":"anonymous","dateUpdated":"2017-10-26T14:03:58+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+-----+\n|       name|count|\n+-----------+-----+\n|      Crime| 4458|\n|    Romance| 7938|\n|   Thriller|11746|\n|  Adventure| 9052|\n|      Drama|18574|\n| Children's| 3904|\n|        War| 4236|\n|Documentary|  398|\n|    Fantasy| 2315|\n|    Mystery| 2222|\n|    Musical| 2128|\n|  Animation| 2704|\n|  Film-Noir| 1120|\n|     Horror| 4240|\n|    Western| 1068|\n|     Comedy|19697|\n|     Action|17136|\n|     Sci-Fi|12279|\n+-----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1507630531950_784603602","id":"20171010-131531_1255489104","dateCreated":"2017-10-10T13:15:31+0100","dateStarted":"2017-10-13T17:38:24+0100","dateFinished":"2017-10-13T17:38:49+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2805"},{"text":"\n// 6 joins\n%sql select genre.name, count(1) from occupation\n  join occupation_e on occupation.id = occupation_e.dst\n  join user on user.id = occupation_e.src\n  join rated_e on user.id = rated_e.src\n  join movie on movie.id = rated_e.dst\n  join genre_e on movie.id = genre_e.src\n  join genre on genre.id = genre_e.dst\n  where occupation.name = \"programmer\"\n  group by genre.name","user":"anonymous","dateUpdated":"2017-10-24T19:36:55+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"count(1)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: occupation; line 1 pos 33\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]},"apps":[],"jobName":"paragraph_1507645819438_-916261169","id":"20171010-173019_1297795091","dateCreated":"2017-10-10T17:30:19+0100","dateStarted":"2017-10-10T20:39:19+0100","dateFinished":"2017-10-10T20:39:19+0100","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:2806"},{"text":"// GraphFrame dataframes are not normalized, it has only two tables, \n// so the SQL will look more complicated.\n// Let's register vertices and edges as temporary tables\ng.vertices.createOrReplaceTempView(\"v\")\ng.edges.createOrReplaceTempView(\"e\")\n","user":"anonymous","dateUpdated":"2017-10-26T14:05:45+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1507879598015_1808940441","id":"20171013-102638_84547898","dateCreated":"2017-10-13T10:26:38+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2807"},{"text":"// Now our join will looks a little bit more wordy\n// The logic is still the same: traversing from 'occupation'  to 'genre'\n// The 'where' statement is the the same as graph frame filter.\n// The 'joins' repeat motif finding part.\n// Actually, 'motif finding' is a syntactic sugar for doing these joins\n%sql select genre.name, count(1) from v occupation\n  join e occupation_e on occupation.id = occupation_e.dst\n  join v user on user.id = occupation_e.src\n  join e rated_e on user.id = rated_e.src\n  join v movie on movie.id = rated_e.dst\n  join e genre_e on movie.id = genre_e.src\n  join v genre on genre.id = genre_e.dst\n  where occupation.name = \"programmer\"\n    and occupation_e.`~label` = \"occupation\" \n    and rated_e.`~label` = \"rated\"\n    and genre_e.`~label` = \"genre\"\n  group by genre.name\n","user":"anonymous","dateUpdated":"2017-11-05T15:27:11+0000","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"name":"string","count(1)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false}},"commonSetting":{},"keys":[{"name":"name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(1)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"name\tcount(1)\nCrime\t4458\nRomance\t7938\nThriller\t11746\nAdventure\t9052\nDrama\t18574\nChildren's\t3904\nWar\t4236\nDocumentary\t398\nFantasy\t2315\nMystery\t2222\nMusical\t2128\nAnimation\t2704\nFilm-Noir\t1120\nHorror\t4240\nWestern\t1068\nComedy\t19697\nAction\t17136\nSci-Fi\t12279\n"}]},"apps":[],"jobName":"paragraph_1507647890220_-163920015","id":"20171010-180450_1497227954","dateCreated":"2017-10-10T18:04:50+0100","dateStarted":"2017-10-10T18:06:01+0100","dateFinished":"2017-10-10T18:06:49+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2808"},{"text":"// Join with other non-Graph sources\n// Let's imagine we have data source with user data, this could be MySQL, Cassandra, CSV ...\nval names = List( (710, \"Russ\") ).toDF(\"uid\", \"user_name\")\n// We can enrich our graph with the external data\nval v = g.vertices\nval nv = v.join(names, v(\"_id\") === names(\"uid\") and v(\"~label\") === \"user\", \"left\")\nval ng = GraphFrame(nv, g.edges)\n// and find that Russ has watched 885 movies!\nng.find(\"(user)-[rated_e]->(movie)\").filter (\"\"\"\n    user.user_name = \"Russ\"\n    and rated_e.`~label` = \"rated\"\n    \"\"\" ).count()","user":"anonymous","dateUpdated":"2017-10-24T19:39:04+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"names: org.apache.spark.sql.DataFrame = [uid: int, user_name: string]\nv: org.apache.spark.sql.DataFrame = [id: string, ~label: string ... 8 more fields]\nnv: org.apache.spark.sql.DataFrame = [id: string, ~label: string ... 10 more fields]\nng: org.graphframes.GraphFrame = GraphFrame(v:[id: string, ~label: string ... 10 more fields], e:[src: string, dst: string ... 4 more fields])\nres48: Long = 885\n"}]},"apps":[],"jobName":"paragraph_1507647961852_1577361562","id":"20171010-180601_1955977226","dateCreated":"2017-10-10T18:06:01+0100","dateStarted":"2017-10-13T19:38:10+0100","dateFinished":"2017-10-13T19:38:16+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2809"},{"text":"// Export is simple\ng.vertices.write.save(\"ml_v\")\ng.edges.write.save(\"ml_e\")\n// Import is as simple as loading two df:\nval g2 = Graphframe(spark.sql(\"select id from v\"), (spark.sql(\"select src, dst from e\"))\n","user":"anonymous","dateUpdated":"2017-10-24T19:39:49+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"INCOMPLETE","msg":[{"type":"TEXT","data":"Incomplete expression"}]},"apps":[],"jobName":"paragraph_1507657549609_-410662620","id":"20171010-204549_1026345703","dateCreated":"2017-10-10T20:45:49+0100","dateStarted":"2017-10-13T17:42:41+0100","dateFinished":"2017-10-13T17:42:48+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2810"},{"text":"// Example of Label Propagation algorithm\nval lp = g.labelPropagation.maxIter(5).run()","user":"anonymous","dateUpdated":"2017-10-24T19:40:02+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lp: org.apache.spark.sql.DataFrame = [id: string, ~label: string ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1507657665912_1455170331","id":"20171010-204745_396410920","dateCreated":"2017-10-10T20:47:45+0100","dateStarted":"2017-10-13T14:14:06+0100","dateFinished":"2017-10-13T14:51:23+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2811"},{"text":"// DataStax is adding TinkerPop to GraphFrames\n// You can mix both languages, thanks to scala implicit\n// Start with tinker pop\ng.V().has(\"occupation\", \"name\", \"programmer\").\n      in(\"occupation\").\n      out(\"rated\").\n      out(\"genre\").\n      // Add some Spark at the end\n     groupBy(\"name\").count().show","user":"anonymous","dateUpdated":"2017-10-24T19:53:03+0100","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+-----+\n|       name|count|\n+-----------+-----+\n|      Crime| 4458|\n|    Romance| 7938|\n|   Thriller|11746|\n|  Adventure| 9052|\n|      Drama|18574|\n| Children's| 3904|\n|        War| 4236|\n|Documentary|  398|\n|    Fantasy| 2315|\n|    Mystery| 2222|\n|    Musical| 2128|\n|  Animation| 2704|\n|  Film-Noir| 1120|\n|     Horror| 4240|\n|    Western| 1068|\n|     Comedy|19697|\n|     Action|17136|\n|     Sci-Fi|12279|\n+-----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1507892987610_-961793819","id":"20171013-140947_888120997","dateCreated":"2017-10-13T14:09:47+0100","dateStarted":"2017-10-20T18:50:55+0100","dateFinished":"2017-10-20T18:51:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2812"},{"text":"g.V().hasLabel(\"movie\").\n      // Find genre\n      out(\"genre\").\n      // Count by genre name\n      groupCount().by(\"name\").show()","user":"anonymous","dateUpdated":"2017-10-26T15:09:59+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+-----+\n|       name|count|\n+-----------+-----+\n|      Crime|  211|\n|    Romance|  471|\n|   Thriller|  492|\n|  Adventure|  283|\n|      Drama| 1603|\n| Children's|  251|\n|        War|  143|\n|Documentary|  127|\n|    Fantasy|   68|\n|    Mystery|  106|\n|    Musical|  114|\n|  Animation|  105|\n|  Film-Noir|   44|\n|     Horror|  343|\n|    Western|   68|\n|     Comedy| 1200|\n|     Action|  503|\n|     Sci-Fi|  276|\n+-----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1508514574386_662601923","id":"20171020-184934_2107783339","dateCreated":"2017-10-20T18:49:34+0100","dateStarted":"2017-10-26T15:09:59+0100","dateFinished":"2017-10-26T15:10:28+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2813"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1509019742049_50642617","id":"20171026-150902_1246427041","dateCreated":"2017-10-26T15:09:02+0100","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:2814"}],"name":"Spark","id":"2CX9V6HGC","angularObjects":{"2CVHA3GYU:shared_process":[],"2CUPJSYQE:shared_process":[],"2CUSV73SH:shared_process":[],"2CRYHYACN:shared_process":[],"2CV2XUSYR:shared_process":[],"2CRWAUJG3:shared_process":[],"2CSHUE6PH:shared_process":[],"2CUN26BJE:shared_process":[],"2CV3YJ6RF:shared_process":[],"2CSWKJZW1:shared_process":[],"2CUWVRD39:shared_process":[],"2CSXUK591:shared_process":[],"2CSKPDGUG:shared_process":[],"2CSVM8WKT:shared_process":[],"2CTH1HWGU:shared_process":[],"2CU8N3A5H:shared_process":[],"2CTHQC5S8:shared_process":[],"2CTNEVX5Y:shared_process":[],"2CT1SDE1U:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}