{"paragraphs":[{"text":"import com.datastax.bdp.graph.spark.graphframe._\nimport org.graphframes._\n\n// Get the same data we had before into Spark.\n// This is Datastax Spark/Graph integration. It support both TinkerPop and\n// GraphFrames for the same source\nval g  = spark.dseGraph(\"movielens\").cache","user":"anonymous","dateUpdated":"2018-05-03T17:20:22+0300","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":12,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.datastax.bdp.graph.spark.graphframe._\nimport org.graphframes._\ng: com.datastax.bdp.graph.spark.graphframe.DseGraphFrame = com.datastax.bdp.graph.spark.graphframe.DseGraphFrame@46ca4112\n"}]},"apps":[],"jobName":"paragraph_1507215302693_653960017","id":"20171005-175502_1259936314","dateCreated":"2017-10-05T17:55:02+0300","dateStarted":"2018-05-03T17:20:22+0300","dateFinished":"2018-05-03T17:20:27+0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:319"},{"text":"// Simple counts are fast and easy\n// GraphFrames are just pair of vertices and edges dataframes.\n// Thus all dataframe methods could be applied to them\ng.vertices.count\ng.edges.count","user":"anonymous","dateUpdated":"2018-04-29T18:55:06+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res41: Long = 9962\nres42: Long = 1012657\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=32","http://10.150.0.248:4041/jobs/job?id=33"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1507630410844_-694522768","id":"20171010-131330_1975195350","dateCreated":"2017-10-10T13:13:30+0300","dateStarted":"2018-04-29T18:55:06+0300","dateFinished":"2018-04-29T18:55:20+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:320"},{"text":"g.V.count.next()\ng.E.count.next()","user":"anonymous","dateUpdated":"2018-04-23T17:25:48+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: Long = 9962\nres2: Long = 1012657\n"}]},"apps":[],"jobName":"paragraph_1524493516801_-108218164","id":"20180423-172516_1394146943","dateCreated":"2018-04-23T17:25:16+0300","dateStarted":"2018-04-23T17:25:48+0300","dateFinished":"2018-04-23T17:26:02+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:321"},{"text":"// Vertices dataframe should have 'id' columns. \ng.vertices.show(3)\n// Edges one should have 'src' and 'dst' columns. All three names are hardcoded\ng.edges.show(3)\n// No support for vertex types, thus I added '~label' column to support them.","user":"anonymous","dateUpdated":"2018-04-29T18:56:18+0300","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":12,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+------+------------+---------+------+----+---+-------+----+----+\n|                  id|~label|community_id|member_id|gender| _id|age|zipcode|name|year|\n+--------------------+------+------------+---------+------+----+---+-------+----+----+\n|user:Wos5AAAAAAAA...|  user|  1519073536|      412|     F|4001| 25|  01860|null|null|\n|user:Wos5AAAAAAAA...|  user|  1519073536|      413|     M|4002| 45|  20880|null|null|\n|user:Wos5AAAAAAAA...|  user|  1519073536|      414|     M|4003| 56|  46143|null|null|\n+--------------------+------+------------+---------+------+----+---+-------+----+----+\nonly showing top 3 rows\n\n+--------------------+--------------------+------+--------------------+-----+---------+\n|                 src|                 dst|~label|                  id|stars|timestamp|\n+--------------------+--------------------+------+--------------------+-----+---------+\n|user:Wos5AAAAAAAA...|movie:AC1wAAAAAAA...| rated|84160a60-46fc-11e...|    3|965583199|\n|user:Wos5AAAAAAAA...|movie:AC1wAAAAAAA...| rated|84163172-46fc-11e...|    3|965572945|\n|user:Wos5AAAAAAAA...|movie:AGakAAAAAAA...| rated|84260ff1-46fc-11e...|    3|965583983|\n+--------------------+--------------------+------+--------------------+-----+---------+\nonly showing top 3 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=34","http://10.150.0.248:4041/jobs/job?id=35"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1507878162550_1831619845","id":"20171013-100242_1559744877","dateCreated":"2017-10-13T10:02:42+0300","dateStarted":"2018-04-29T18:56:18+0300","dateFinished":"2018-04-29T18:56:20+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:322"},{"text":"// Traversals with GraphFrames are done with \"motif finding language\"\n// A sequence of patterns in the form of vertex to edge to vertex triplets\n// All patterns have named variables that are mapped in a result dataframe struct column\n\n// This is the same request I used before:\n// What are programmers watching\n// But it's longer. 325 vs 136 symbols\nval df = g.find(\"\"\"\n    (user)-[occupation_e]->(occupation);\n    (user)-[rated_e]->(movie);\n    (movie)-[genre_e]->(genre)\n    \"\"\").filter (\"\"\"\n    occupation.name = \"programmer\"\n    and occupation_e.`~label` = \"occupation\"\n    and rated_e.`~label` = \"rated\"\n    and genre_e.`~label` = \"genre\"\n    \"\"\" ).groupBy(\"genre.name\").count()\nz.show(df)\n","user":"anonymous","dateUpdated":"2018-04-29T18:56:24+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"name":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [name: string, count: bigint]\n"},{"type":"TABLE","data":"name\tcount\nCrime\t4458\nRomance\t7938\nThriller\t11746\nAdventure\t9052\nDrama\t18574\nChildren's\t3904\nWar\t4236\nDocumentary\t398\nFantasy\t2315\nMystery\t2222\nMusical\t2128\nAnimation\t2704\nFilm-Noir\t1120\nHorror\t4240\nWestern\t1068\nComedy\t19697\nAction\t17136\nSci-Fi\t12279\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=36","http://10.150.0.248:4041/jobs/job?id=37","http://10.150.0.248:4041/jobs/job?id=38","http://10.150.0.248:4041/jobs/job?id=39","http://10.150.0.248:4041/jobs/job?id=40","http://10.150.0.248:4041/jobs/job?id=41","http://10.150.0.248:4041/jobs/job?id=42","http://10.150.0.248:4041/jobs/job?id=43","http://10.150.0.248:4041/jobs/job?id=44"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1507630531950_784603602","id":"20171010-131531_1255489104","dateCreated":"2017-10-10T13:15:31+0300","dateStarted":"2018-04-29T18:56:24+0300","dateFinished":"2018-04-29T18:57:03+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:323"},{"text":"\n// 6 joins\n%sql select genre.name, count(1) from occupation\n  join occupation_e on occupation.id = occupation_e.dst\n  join user on user.id = occupation_e.src\n  join rated_e on user.id = rated_e.src\n  join movie on movie.id = rated_e.dst\n  join genre_e on movie.id = genre_e.src\n  join genre on genre.id = genre_e.dst\n  where occupation.name = \"programmer\"\n  group by genre.name","user":"anonymous","dateUpdated":"2017-10-24T19:36:55+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"count(1)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: occupation; line 1 pos 33\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]},"apps":[],"jobName":"paragraph_1507645819438_-916261169","id":"20171010-173019_1297795091","dateCreated":"2017-10-10T17:30:19+0300","dateStarted":"2017-10-10T20:39:19+0300","dateFinished":"2017-10-10T20:39:19+0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:324"},{"text":"// GraphFrame dataframes are not normalized, it has only two tables, \n// so the SQL will look more complicated.\n// Let's register vertices and edges as temporary tables\ng.vertices.createOrReplaceTempView(\"v\")\ng.edges.createOrReplaceTempView(\"e\")\n","user":"anonymous","dateUpdated":"2017-10-26T14:05:45+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1507879598015_1808940441","id":"20171013-102638_84547898","dateCreated":"2017-10-13T10:26:38+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:325"},{"text":"// Now our join will looks a little bit more wordy\n// The logic is still the same: traversing from 'occupation'  to 'genre'\n// The 'where' statement is the the same as graph frame filter.\n// The 'joins' repeat motif finding part.\n// Actually, 'motif finding' is a syntactic sugar for doing these joins\n%sql select genre.name, count(1) from v occupation\n  join e occupation_e on occupation.id = occupation_e.dst\n  join v user on user.id = occupation_e.src\n  join e rated_e on user.id = rated_e.src\n  join v movie on movie.id = rated_e.dst\n  join e genre_e on movie.id = genre_e.src\n  join v genre on genre.id = genre_e.dst\n  where occupation.name = \"programmer\"\n    and occupation_e.`~label` = \"occupation\" \n    and rated_e.`~label` = \"rated\"\n    and genre_e.`~label` = \"genre\"\n  group by genre.name\n","user":"anonymous","dateUpdated":"2018-05-03T17:19:07+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"name":"string","count(1)":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false}},"commonSetting":{},"keys":[{"name":"name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count(1)","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"name\tcount(1)\nCrime\t4458\nRomance\t7938\nThriller\t11746\nAdventure\t9052\nDrama\t18574\nChildren's\t3904\nWar\t4236\nDocumentary\t398\nFantasy\t2315\nMystery\t2222\nMusical\t2128\nAnimation\t2704\nFilm-Noir\t1120\nHorror\t4240\nWestern\t1068\nComedy\t19697\nAction\t17136\nSci-Fi\t12279\n"}]},"apps":[],"jobName":"paragraph_1507647890220_-163920015","id":"20171010-180450_1497227954","dateCreated":"2017-10-10T18:04:50+0300","dateStarted":"2017-10-10T18:06:01+0300","dateFinished":"2017-10-10T18:06:49+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:326"},{"text":"// Join with other non-Graph sources\n// Let's imagine we have data source with user data, this could be MySQL, Cassandra, CSV ...\nval names = List( (710, \"Russ\") ).toDF(\"uid\", \"user_name\")\n// We can enrich our graph with the external data\nval v = g.vertices\nval nv = v.join(names, v(\"_id\") === names(\"uid\") and v(\"~label\") === \"user\", \"left\")\nval ng = GraphFrame(nv, g.edges)\n// and find that Russ has watched 885 movies!\nng.find(\"(user)-[rated_e]->(movie)\").filter (\"\"\"\n    user.user_name = \"Russ\"\n    and rated_e.`~label` = \"rated\"\n    \"\"\" ).count()","user":"anonymous","dateUpdated":"2017-10-24T19:39:04+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"names: org.apache.spark.sql.DataFrame = [uid: int, user_name: string]\nv: org.apache.spark.sql.DataFrame = [id: string, ~label: string ... 8 more fields]\nnv: org.apache.spark.sql.DataFrame = [id: string, ~label: string ... 10 more fields]\nng: org.graphframes.GraphFrame = GraphFrame(v:[id: string, ~label: string ... 10 more fields], e:[src: string, dst: string ... 4 more fields])\nres48: Long = 885\n"}]},"apps":[],"jobName":"paragraph_1507647961852_1577361562","id":"20171010-180601_1955977226","dateCreated":"2017-10-10T18:06:01+0300","dateStarted":"2017-10-13T19:38:10+0300","dateFinished":"2017-10-13T19:38:16+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:327"},{"text":"// Export is simple\ng.vertices.write.save(\"ml_v\")\ng.edges.write.save(\"ml_e\")\n// Import is as simple as loading two df:\nval g2 = Graphframe(spark.sql(\"select id from v\"), (spark.sql(\"select src, dst from e\"))\n","user":"anonymous","dateUpdated":"2018-04-25T16:41:53+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"INCOMPLETE","msg":[{"type":"TEXT","data":"Incomplete expression"}]},"apps":[],"jobName":"paragraph_1507657549609_-410662620","id":"20171010-204549_1026345703","dateCreated":"2017-10-10T20:45:49+0300","dateStarted":"2018-04-25T16:41:53+0300","dateFinished":"2018-04-25T16:42:00+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:328"},{"text":"%md # DSE Queries","user":"anonymous","dateUpdated":"2018-04-25T16:55:36+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>DSE Queries</h1>\n</div>"}]},"apps":[],"jobName":"paragraph_1524664520313_343265067","id":"20180425-165520_814997043","dateCreated":"2018-04-25T16:55:20+0300","dateStarted":"2018-04-25T16:55:36+0300","dateFinished":"2018-04-25T16:55:36+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:329"},{"text":"val df = g.V().hasLabel(\"movie\").\n      // Find genre\n      out(\"genre\").\n      // Count by genre name\n      groupCount().by(\"name\").df\n\nz.show(df)\n","user":"anonymous","dateUpdated":"2018-05-03T17:19:07+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"name","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"count","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"name":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [name: string, count: bigint]\n"},{"type":"TABLE","data":"name\tcount\nCrime\t211\nRomance\t471\nThriller\t492\nAdventure\t283\nDrama\t1603\nChildren's\t251\nWar\t143\nDocumentary\t127\nFantasy\t68\nMystery\t106\nMusical\t114\nAnimation\t105\nFilm-Noir\t44\nHorror\t343\nWestern\t68\nComedy\t1200\nAction\t503\nSci-Fi\t276\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=45","http://10.150.0.248:4041/jobs/job?id=46","http://10.150.0.248:4041/jobs/job?id=47","http://10.150.0.248:4041/jobs/job?id=48","http://10.150.0.248:4041/jobs/job?id=49","http://10.150.0.248:4041/jobs/job?id=50","http://10.150.0.248:4041/jobs/job?id=51"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1508514574386_662601923","id":"20171020-184934_2107783339","dateCreated":"2017-10-20T18:49:34+0300","dateStarted":"2018-04-29T19:00:47+0300","dateFinished":"2018-04-29T19:00:50+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:330"},{"text":"// DataStax is adding TinkerPop to GraphFrames\n// You can mix both languages, thanks to scala implicit\n// Start with tinker pop\nval df = g.V().has(\"occupation\", \"name\", \"programmer\").\n      in(\"occupation\").\n      out(\"rated\").\n      out(\"genre\").\n      // Add some Spark at the end\n     groupBy(\"name\").count()\nz.show(df)","user":"anonymous","dateUpdated":"2018-05-03T17:19:08+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"1":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"name":"string","count":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"count","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"df: org.apache.spark.sql.DataFrame = [name: string, count: bigint]\n"},{"type":"TABLE","data":"name\tcount\nCrime\t4458\nRomance\t7938\nThriller\t11746\nAdventure\t9052\nDrama\t18574\nChildren's\t3904\nWar\t4236\nDocumentary\t398\nFantasy\t2315\nMystery\t2222\nMusical\t2128\nAnimation\t2704\nFilm-Noir\t1120\nHorror\t4240\nWestern\t1068\nComedy\t19697\nAction\t17136\nSci-Fi\t12279\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=52","http://10.150.0.248:4041/jobs/job?id=53","http://10.150.0.248:4041/jobs/job?id=54","http://10.150.0.248:4041/jobs/job?id=55","http://10.150.0.248:4041/jobs/job?id=56","http://10.150.0.248:4041/jobs/job?id=57","http://10.150.0.248:4041/jobs/job?id=58"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1507892987610_-961793819","id":"20171013-140947_888120997","dateCreated":"2017-10-13T14:09:47+0300","dateStarted":"2018-04-29T19:02:20+0300","dateFinished":"2018-04-29T19:02:52+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:331"},{"text":"import com.datastax.dse.graph.api.predicates.Search;\nval df = g.V().\n    //find all Star Trek movies\n    has(\"movie\", \"name\", Search.regex(\"Star Trek.*\")).as(\"movie\").\n    // gendre\n    out(\"genre\").as(\"genre\").\n    // select names of both\n    select(\"movie\", \"genre\").by(\"name\").\n    // group by name\n    groupBy(\"movie\").agg(concat_ws(\",\", collect_list($\"genre\")))\n// Viz\nz.show(df)\n","user":"anonymous","dateUpdated":"2018-04-25T15:40:29+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"movie":"string","concat_ws(,, collect_list(genre))":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.datastax.dse.graph.api.predicates.Search\ndf: org.apache.spark.sql.DataFrame = [movie: string, concat_ws(,, collect_list(genre)): string]\n"},{"type":"TABLE","data":"movie\tconcat_ws(,, collect_list(genre))\nStar Trek: Generations\tAdventure,Action,Sci-Fi\nStar Trek: First Contact\tAdventure,Action,Sci-Fi\nStar Trek: Insurrection\tAction,Sci-Fi\nStar Trek III: The Search for Spock\tAdventure,Action,Sci-Fi\nStar Trek V: The Final Frontier\tAdventure,Action,Sci-Fi\nStar Trek: The Motion Picture\tAdventure,Action,Sci-Fi\nStar Trek IV: The Voyage Home\tAdventure,Action,Sci-Fi\nStar Trek: The Wrath of Khan\tAdventure,Action,Sci-Fi\nStar Trek VI: The Undiscovered Country\tAdventure,Action,Sci-Fi\n"}]},"apps":[],"jobName":"paragraph_1524658266353_529261076","id":"20180425-151106_1220144063","dateCreated":"2018-04-25T15:11:06+0300","dateStarted":"2018-04-25T15:40:26+0300","dateFinished":"2018-04-25T15:40:29+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:332"},{"text":"%md ## Top5 movies per genre","user":"anonymous","dateUpdated":"2018-04-26T12:06:27+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Top5 movies per genre</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1524666907501_39884243","id":"20180425-173507_1748723120","dateCreated":"2018-04-25T17:35:07+0300","dateStarted":"2018-04-26T12:06:27+0300","dateFinished":"2018-04-26T12:06:27+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:333"},{"text":"import org.apache.spark.sql.expressions.Window\n\nval ratings = g.V().hasLabel(\"genre\").as(\"g\").\n        // Follow 'genre' edge to 'movies'\n        in(\"genre\").hasLabel(\"movie\").as(\"m\").\n        // By 'rated' edge to users\n        inE(\"rated\").as(\"r\").\n        select(\"g\", \"m\", \"r\").by(\"stars\").by(\"name\").by(\"name\").\n        // SQL starts here\n        // find everage rating per movie\n        groupBy(\"g\", \"m\").agg(mean(\"r\") as \"r\")\n        \n// partition by genre and sort by rating inside each partition\nval rateWin = Window.partitionBy($\"g\").orderBy($\"r\".desc)\n// add rank and select top 5 item per partition\nval df = ratings.withColumn(\"rank\", rank.over(rateWin)).filter($\"rank\" <=5)         \n    \nz.show(df)        ","user":"anonymous","dateUpdated":"2018-04-25T18:24:18+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"g":"string","m":"string","r":"string","rank":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions.Window\nratings: org.apache.spark.sql.DataFrame = [g: string, m: string ... 1 more field]\nrateWin: org.apache.spark.sql.expressions.WindowSpec = org.apache.spark.sql.expressions.WindowSpec@71d37b19\ndf: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [g: string, m: string ... 2 more fields]\n"},{"type":"TABLE","data":"g\tm\tr\trank\nCrime\tLured\t5.0\t1\nCrime\tGodfather, The\t4.524966261808367\t2\nCrime\tUsual Suspects, The\t4.517106001121705\t3\nCrime\tBells, The\t4.5\t4\nCrime\tDouble Indemnity\t4.415607985480944\t5\nRomance\tSkipped Parts\t4.5\t1\nRomance\tCasablanca\t4.412822049131217\t2\nRomance\tCity Lights\t4.387453874538745\t3\nRomance\tPrincess Bride, The\t4.3037100949094045\t4\nRomance\tPhiladelphia Story, The\t4.3006872852233675\t5\nThriller\tClose Shave, A\t4.52054794520548\t1\nThriller\tUsual Suspects, The\t4.517106001121705\t2\nThriller\tRear Window\t4.476190476190476\t3\nThriller\tThird Man, The\t4.452083333333333\t4\nThriller\tSixth Sense, The\t4.406262708418057\t5\nAdventure\tUlysses (Ulisse)\t5.0\t1\nAdventure\tSanjuro\t4.608695652173913\t2\nAdventure\tRaiders of the Lost Ark\t4.477724741447892\t3\nAdventure\tStar Wars: Episode IV - A New Hope\t4.453694416583082\t4\nAdventure\tLawrence of Arabia\t4.401925391095066\t5\nChildren's\tWizard of Oz, The\t4.247962747380675\t1\nChildren's\tToy Story 2\t4.218927444794953\t2\nChildren's\tToy Story\t4.146846413095811\t3\nChildren's\tIron Giant, The\t4.0474777448071215\t4\nChildren's\tWinnie the Pooh and the Blustery Day\t3.986425339366516\t5\nDrama\tSong of Freedom\t5.0\t1\nDrama\tOne Little Indian\t5.0\t1\nDrama\tSchlafes Bruder (Brother of Sleep)\t5.0\t1\nDrama\tI Am Cuba (Soy Cuba/Ya Kuba)\t4.8\t4\nDrama\tLamerica\t4.75\t5\nWar\tSchindler's List\t4.510416666666667\t1\nWar\tPaths of Glory\t4.473913043478261\t2\nWar\tDr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\t4.4498902706656915\t3\nWar\tCasablanca\t4.412822049131217\t4\nWar\tLawrence of Arabia\t4.401925391095066\t5\nDocumentary\tGate of Heavenly Peace, The\t5.0\t1\nDocumentary\tBittersweet Motel\t5.0\t1\nDocumentary\tFor All Mankind\t4.444444444444445\t3\nDocumentary\tReturn with Honor\t4.4\t4\nDocumentary\tJupiter's Wife\t4.333333333333333\t5\nFantasy\tStar Wars: Episode IV - A New Hope\t4.453694416583082\t1\nFantasy\tHungarian Fairy Tale, A\t4.0\t2\nFantasy\tE.T. the Extra-Terrestrial\t3.9651828999559275\t3\nFantasy\tHeavenly Creatures\t3.8658280922431865\t4\nFantasy\tWilly Wonka and the Chocolate Factory\t3.8613861386138613\t5\nMystery\tHour of the Pig, The\t4.5\t1\nMystery\tRear Window\t4.476190476190476\t2\nMystery\tThird Man, The\t4.452083333333333\t3\nMystery\tMaltese Falcon, The\t4.395973154362416\t4\nMystery\tChinatown\t4.339240506329114\t5\nMusical\tSingin' in the Rain\t4.2836218375499335\t1\nMusical\tWizard of Oz, The\t4.247962747380675\t2\nMusical\tThis Is Spinal Tap\t4.179785330948121\t3\nMusical\tShall We Dance?\t4.1657142857142855\t4\nMusical\tMy Fair Lady\t4.154088050314465\t5\nAnimation\tClose Shave, A\t4.52054794520548\t1\nAnimation\tWrong Trousers, The\t4.507936507936508\t2\nAnimation\tWallace & Gromit: The Best of Aardman Animation\t4.426940639269406\t3\nAnimation\tGrand Day Out, A\t4.361522198731501\t4\nAnimation\tCreature Comforts\t4.335766423357664\t5\nFilm-Noir\tSunset Blvd. (a.k.a. Sunset Boulevard)\t4.491489361702127\t1\nFilm-Noir\tDouble Indemnity\t4.415607985480944\t2\nFilm-Noir\tMaltese Falcon, The\t4.395973154362416\t3\nFilm-Noir\tChinatown\t4.339240506329114\t4\nFilm-Noir\tManchurian Candidate, The\t4.333333333333333\t5\nHorror\tBaby, The\t5.0\t1\nHorror\tYoung Frankenstein\t4.250628667225482\t2\nHorror\tAlien\t4.159584980237154\t3\nHorror\tShining, The\t4.104875804967802\t4\nHorror\tJaws\t4.089569829110195\t5\nWestern\tOne Little Indian\t5.0\t1\nWestern\tYojimbo\t4.404651162790698\t2\nWestern\tButch Cassidy and the Sundance Kid\t4.215644820295983\t3\nWestern\tHigh Noon\t4.1786600496277915\t4\nWestern\tGood, The Bad and The Ugly, The\t4.133819951338199\t5\nComedy\tFollow the Bitch\t5.0\t1\nComedy\tSmashing Time\t5.0\t1\nComedy\tOne Little Indian\t5.0\t1\nComedy\tClose Shave, A\t4.52054794520548\t4\nComedy\tWrong Trousers, The\t4.507936507936508\t5\nAction\tSanjuro\t4.608695652173913\t1\nAction\tSeven Samurai (The Magnificent Seven) (Shichinin no samurai)\t4.560509554140127\t2\nAction\tGodfather, The\t4.524966261808367\t3\nAction\tRaiders of the Lost Ark\t4.477724741447892\t4\nAction\tStar Wars: Episode IV - A New Hope\t4.453694416583082\t5\nSci-Fi\tStar Wars: Episode IV - A New Hope\t4.453694416583082\t1\nSci-Fi\tDr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb\t4.4498902706656915\t2\nSci-Fi\tMatrix, The\t4.315830115830116\t3\nSci-Fi\tStar Wars: Episode V - The Empire Strikes Back\t4.292976588628763\t4\nSci-Fi\tBlade Runner\t4.273333333333333\t5\n"}]},"apps":[],"jobName":"paragraph_1509019742049_50642617","id":"20171026-150902_1246427041","dateCreated":"2017-10-26T15:09:02+0300","dateStarted":"2018-04-25T18:19:23+0300","dateFinished":"2018-04-25T18:19:53+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:334"},{"text":"%md ## Insert shortcut edge","user":"anonymous","dateUpdated":"2018-04-25T18:29:20+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Insert shortcut edge</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1524667497421_267702088","id":"20180425-174457_89081524","dateCreated":"2018-04-25T17:44:57+0300","dateStarted":"2018-04-25T18:29:20+0300","dateFinished":"2018-04-25T18:29:20+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:335"},{"text":"import org.apache.spark.sql.expressions.Window\n\nval ratings = g.V().hasLabel(\"genre\").as(\"g\").\n        // Follow 'genre' edge to 'movies'\n        in(\"genre\").hasLabel(\"movie\").as(\"m\").\n        // By 'rated' edge to users\n        inE(\"rated\").as(\"r\").\n        // TinkerPop select\n        select(\"g\", \"m\", \"r\").\n        // SQL starts here\n        // Dataframe one\n        select($\"g.id\" as \"src\", $\"m.id\" as \"dst\",  $\"r.stars\" as \"stars\").\n        // find everage rating per movie\n        groupBy(\"src\", \"dst\").agg(mean(\"stars\") as \"rating\")\n// partition by genre and sort by rating inside each partition\nval rateWin = Window.partitionBy($\"src\").orderBy($\"rating\".desc)\n// add rank and select top 5 item per partition\nval top5 = ratings.withColumn(\"rank\", rank.over(rateWin)).filter($\"rank!!!!\" <=5).\n        withColumn(\"~label\", lit(\"top5\"))\n//finaly add shortcut edges\ng.updateEdges(top5)\nz.show(top5)","user":"anonymous","dateUpdated":"2018-05-02T23:21:04+0300","config":{"colWidth":12,"fontSize":12,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"src":"string","dst":"string","rating":"string","rank":"string","~label":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions.Window\nratings: org.apache.spark.sql.DataFrame = [src: string, dst: string ... 1 more field]\nrateWin: org.apache.spark.sql.expressions.WindowSpec = org.apache.spark.sql.expressions.WindowSpec@648b1141\norg.apache.spark.sql.AnalysisException: cannot resolve '`rank!!!!`' given input columns: [src, dst, rating, rank];;\n'Filter ('rank!!!! <= 5)\n+- Project [src#4570, dst#4571, rating#4585, rank#4592]\n   +- Project [src#4570, dst#4571, rating#4585, rank#4592, rank#4592]\n      +- Window [rank(rating#4585) windowspecdefinition(src#4570, rating#4585 DESC NULLS LAST, ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS rank#4592], [src#4570], [rating#4585 DESC NULLS LAST]\n         +- Project [src#4570, dst#4571, rating#4585]\n            +- Aggregate [src#4570, dst#4571], [src#4570, dst#4571, avg(cast(stars#4572 as double)) AS rating#4585]\n               +- Project [g#4560.id AS src#4570, m#4561.id AS dst#4571, r#4559.stars AS stars#4572]\n                  +- Project [~traversers#4550.r AS r#4559, ~traversers#4550.g AS g#4560, ~traversers#4550.m AS m#4561]\n                     +- Project [named_struct(g, ~traversers#4538.g, m, ~traversers#4538.m, r, named_struct(src, src#4532, dst, dst#4533, ~label, ~label#4534, id, id#4535, stars, stars#4536, timestamp, timestamp#4537)) AS ~traversers#4550, src#4532, dst#4533, ~label#4534, id#4535, stars#4536, timestamp#4537]\n                        +- Project [_1#4529.~traversers AS ~traversers#4538, _2#4530.src AS src#4532, _2#4530.dst AS dst#4533, _2#4530.~label AS ~label#4534, _2#4530.id AS id#4535, _2#4530.stars AS stars#4536, _2#4530.timestamp AS timestamp#4537]\n                           +- Join Inner, (_1#4529.id = _2#4530.dst)\n                              :- Project [named_struct(~traversers, ~traversers#4515, id, id#4495, ~label, ~label#3955, community_id, community_id#3956, member_id, member_id#3957L, gender, gender#3958, _id, _id#3959, age, age#3960, zipcode, zipcode#3961, name, name#3962, year, year#3963) AS _1#4529]\n                              :  +- Project [named_struct(g, ~traversers#4496.g, m, named_struct(id, id#4495, ~label, ~label#3955, community_id, community_id#3956, member_id, member_id#3957L, gender, gender#3958, _id, _id#3959, age, age#3960, zipcode, zipcode#3961, name, name#3962, year, year#3963)) AS ~traversers#4515, id#4495, ~label#3955, community_id#3956, member_id#3957L, gender#3958, _id#3959, age#3960, zipcode#3961, name#3962, year#3963]\n                              :     +- Filter (~label#3955 = movie)\n                              :        +- Project [id#4495, ~traversers#4496, ~label#3955, community_id#3956, member_id#3957L, gender#3958, _id#3959, age#3960, zipcode#3961, name#3962, year#3963]\n                              :           +- Join Inner, (id#4495 = id#3954)\n                              :              :- Project [_1#4491.~traversers AS ~traversers#4496, _2#4492.src AS id#4495]\n                              :              :  +- Join Inner, (_1#4491.id = _2#4492.dst)\n                              :              :     :- Project [named_struct(~traversers, ~traversers#4477, id, id#3954, ~label, ~label#3955, community_id, community_id#3956, member_id, member_id#3957L, gender, gender#3958, _id, _id#3959, age, age#3960, zipcode, zipcode#3961, name, name#3962, year, year#3963) AS _1#4491]\n                              :              :     :  +- Project [named_struct(g, named_struct(id, id#3954, ~label, ~label#3955, community_id, community_id#3956, member_id, member_id#3957L, gender, gender#3958, _id, _id#3959, age, age#3960, zipcode, zipcode#3961, name, name#3962, year, year#3963)) AS ~traversers#4477, id#3954, ~label#3955, community_id#3956, member_id#3957L, gender#3958, _id#3959, age#3960, zipcode#3961, name#3962, year#3963]\n                              :              :     :     +- Filter (~label#3955 = genre)\n                              :              :     :        +- Project [id#3954, ~label#3955, community_id#3956, member_id#3957L, gender#3958, _id#3959, age#3960, zipcode#3961, name#3962, year#3963, false AS ~traversers#4462]\n                              :              :     :           +- Union\n                              :              :     :              :- Project [concat_ws(:, user, base64(if ((isnull(community_id#3937) || isnull(member_id#3938L))) null else UDF(community_id#3937, member_id#3938L))) AS id#3954, user AS ~label#3955, community_id#3937 AS community_id#3956, member_id#3938L AS member_id#3957L, gender#3939 AS gender#3958, id#3940 AS _id#3959, age#3941 AS age#3960, zipcode#3942 AS zipcode#3961, name#3943 AS name#3962, year#3944 AS year#3963]\n                              :              :     :              :  +- Relation[community_id#3937,member_id#3938L,gender#3939,id#3940,age#3941,zipcode#3942,name#3943,year#3944] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@6b28ec74\n                              :              :     :              :- Project [concat_ws(:, genre, base64(if ((isnull(community_id#3975) || isnull(member_id#3976L))) null else UDF(community_id#3975, member_id#3976L))) AS id#3992, genre AS ~label#3993, community_id#3975 AS community_id#3994, member_id#3976L AS member_id#3995L, gender#3977 AS gender#3996, id#3978 AS _id#3997, age#3979 AS age#3998, zipcode#3980 AS zipcode#3999, name#3981 AS name#4000, year#3982 AS year#4001]\n                              :              :     :              :  +- Relation[community_id#3975,member_id#3976L,gender#3977,id#3978,age#3979,zipcode#3980,name#3981,year#3982] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@2a21359b\n                              :              :     :              :- Project [concat_ws(:, occupation, base64(if ((isnull(community_id#4013) || isnull(member_id#4014L))) null else UDF(community_id#4013, member_id#4014L))) AS id#4030, occupation AS ~label#4031, community_id#4013 AS community_id#4032, member_id#4014L AS member_id#4033L, gender#4015 AS gender#4034, id#4016 AS _id#4035, age#4017 AS age#4036, zipcode#4018 AS zipcode#4037, name#4019 AS name#4038, year#4020 AS year#4039]\n                              :              :     :              :  +- Relation[community_id#4013,member_id#4014L,gender#4015,id#4016,age#4017,zipcode#4018,name#4019,year#4020] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@686b4f84\n                              :              :     :              +- Project [concat_ws(:, movie, base64(if ((isnull(community_id#4051) || isnull(member_id#4052L))) null else UDF(community_id#4051, member_id#4052L))) AS id#4068, movie AS ~label#4069, community_id#4051 AS community_id#4070, member_id#4052L AS member_id#4071L, gender#4053 AS gender#4072, id#4054 AS _id#4073, age#4055 AS age#4074, zipcode#4056 AS zipcode#4075, name#4057 AS name#4076, year#4058 AS year#4077]\n                              :              :     :                 +- Relation[community_id#4051,member_id#4052L,gender#4053,id#4054,age#4055,zipcode#4056,name#4057,year#4058] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@4138f0c6\n                              :              :     +- Project [named_struct(src, src#4122, dst, dst#4123, ~label, ~label#4124, id, id#4125, stars, stars#4147, timestamp, timestamp#4148) AS _2#4492]\n                              :              :        +- Filter ~label#4124 IN (genre)\n                              :              :           +- Union\n                              :              :              :- Project [src#4122, dst#4123, ~label#4124, id#4125, stars#4147, timestamp#4148]\n                              :              :              :  +- Project [src#4122, dst#4123, ~label#4124, id#4125, stars#4147, timestamp#4148]\n                              :              :              :     +- Project [concat_ws(:, user, base64(if ((isnull(community_id#4126) || isnull(member_id#4127L))) null else UDF(community_id#4126, member_id#4127L))) AS src#4122, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4130 as int))) null else UDF(cast(~~adjacent_label_id#4130 as int)), base64(~~adjacent_vertex_id#4129)) AS dst#4123, if (isnull(~~edge_label_id#4128)) null else UDF(~~edge_label_id#4128) AS ~label#4124, ~~edge_id#4131 AS id#4125, ~stars#4132 AS stars#4147, ~timestamp#4133 AS timestamp#4148]\n                              :              :              :        +- Filter ((~~edge_label_id#4128 % 2) = 0)\n                              :              :              :           +- Relation[community_id#4126,member_id#4127L,~~edge_label_id#4128,~~adjacent_vertex_id#4129,~~adjacent_label_id#4130,~~edge_id#4131,~stars#4132,~timestamp#4133,~~edge_exists#4134,~~simple_edge_id#4135] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                              :              :              :- Project [src#4157, dst#4158, ~label#4159, id#4160, stars#4254, timestamp#4255]\n                              :              :              :  +- Project [src#4157, dst#4158, ~label#4159, id#4160, cast(stars#4178 as string) AS stars#4254, cast(timestamp#4179 as string) AS timestamp#4255]\n                              :              :              :     +- Project [concat_ws(:, genre, base64(if ((isnull(community_id#4161) || isnull(member_id#4162L))) null else UDF(community_id#4161, member_id#4162L))) AS src#4157, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4165 as int))) null else UDF(cast(~~adjacent_label_id#4165 as int)), base64(~~adjacent_vertex_id#4164)) AS dst#4158, if (isnull(~~edge_label_id#4163)) null else UDF(~~edge_label_id#4163) AS ~label#4159, ~~edge_id#4166 AS id#4160, null AS stars#4178, null AS timestamp#4179]\n                              :              :              :        +- Filter ((~~edge_label_id#4163 % 2) = 0)\n                              :              :              :           +- Relation[community_id#4161,member_id#4162L,~~edge_label_id#4163,~~adjacent_vertex_id#4164,~~adjacent_label_id#4165,~~edge_id#4166,~~edge_exists#4167,~~simple_edge_id#4168] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                              :              :              :- Project [src#4188, dst#4189, ~label#4190, id#4191, cast(stars#4209 as string) AS stars#4263, cast(timestamp#4210 as string) AS timestamp#4264]\n                              :              :              :  +- Project [concat_ws(:, occupation, base64(if ((isnull(community_id#4192) || isnull(member_id#4193L))) null else UDF(community_id#4192, member_id#4193L))) AS src#4188, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4196 as int))) null else UDF(cast(~~adjacent_label_id#4196 as int)), base64(~~adjacent_vertex_id#4195)) AS dst#4189, if (isnull(~~edge_label_id#4194)) null else UDF(~~edge_label_id#4194) AS ~label#4190, ~~edge_id#4197 AS id#4191, null AS stars#4209, null AS timestamp#4210]\n                              :              :              :     +- Filter ((~~edge_label_id#4194 % 2) = 0)\n                              :              :              :        +- Relation[community_id#4192,member_id#4193L,~~edge_label_id#4194,~~adjacent_vertex_id#4195,~~adjacent_label_id#4196,~~edge_id#4197,~~edge_exists#4198,~~simple_edge_id#4199] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                              :              :              +- Project [concat_ws(:, movie, base64(if ((isnull(community_id#4223) || isnull(member_id#4224L))) null else UDF(community_id#4223, member_id#4224L))) AS src#4219, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4227 as int))) null else UDF(cast(~~adjacent_label_id#4227 as int)), base64(~~adjacent_vertex_id#4226)) AS dst#4220, if (isnull(~~edge_label_id#4225)) null else UDF(~~edge_label_id#4225) AS ~label#4221, ~~edge_id#4228 AS id#4222, ~stars#4229 AS stars#4244, ~timestamp#4230 AS timestamp#4245]\n                              :              :                 +- Filter ((~~edge_label_id#4225 % 2) = 0)\n                              :              :                    +- Relation[community_id#4223,member_id#4224L,~~edge_label_id#4225,~~adjacent_vertex_id#4226,~~adjacent_label_id#4227,~~edge_id#4228,~stars#4229,~timestamp#4230,~~edge_exists#4231,~~simple_edge_id#4232] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                              :              +- Union\n                              :                 :- Project [concat_ws(:, user, base64(if ((isnull(community_id#3937) || isnull(member_id#3938L))) null else UDF(community_id#3937, member_id#3938L))) AS id#3954, user AS ~label#3955, community_id#3937 AS community_id#3956, member_id#3938L AS member_id#3957L, gender#3939 AS gender#3958, id#3940 AS _id#3959, age#3941 AS age#3960, zipcode#3942 AS zipcode#3961, name#3943 AS name#3962, year#3944 AS year#3963]\n                              :                 :  +- Relation[community_id#3937,member_id#3938L,gender#3939,id#3940,age#3941,zipcode#3942,name#3943,year#3944] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@6b28ec74\n                              :                 :- Project [concat_ws(:, genre, base64(if ((isnull(community_id#3975) || isnull(member_id#3976L))) null else UDF(community_id#3975, member_id#3976L))) AS id#3992, genre AS ~label#3993, community_id#3975 AS community_id#3994, member_id#3976L AS member_id#3995L, gender#3977 AS gender#3996, id#3978 AS _id#3997, age#3979 AS age#3998, zipcode#3980 AS zipcode#3999, name#3981 AS name#4000, year#3982 AS year#4001]\n                              :                 :  +- Relation[community_id#3975,member_id#3976L,gender#3977,id#3978,age#3979,zipcode#3980,name#3981,year#3982] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@2a21359b\n                              :                 :- Project [concat_ws(:, occupation, base64(if ((isnull(community_id#4013) || isnull(member_id#4014L))) null else UDF(community_id#4013, member_id#4014L))) AS id#4030, occupation AS ~label#4031, community_id#4013 AS community_id#4032, member_id#4014L AS member_id#4033L, gender#4015 AS gender#4034, id#4016 AS _id#4035, age#4017 AS age#4036, zipcode#4018 AS zipcode#4037, name#4019 AS name#4038, year#4020 AS year#4039]\n                              :                 :  +- Relation[community_id#4013,member_id#4014L,gender#4015,id#4016,age#4017,zipcode#4018,name#4019,year#4020] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@686b4f84\n                              :                 +- Project [concat_ws(:, movie, base64(if ((isnull(community_id#4051) || isnull(member_id#4052L))) null else UDF(community_id#4051, member_id#4052L))) AS id#4068, movie AS ~label#4069, community_id#4051 AS community_id#4070, member_id#4052L AS member_id#4071L, gender#4053 AS gender#4072, id#4054 AS _id#4073, age#4055 AS age#4074, zipcode#4056 AS zipcode#4075, name#4057 AS name#4076, year#4058 AS year#4077]\n                              :                    +- Relation[community_id#4051,member_id#4052L,gender#4053,id#4054,age#4055,zipcode#4056,name#4057,year#4058] com.datastax.bdp.graph.spark.sql.vertex.SingleLabelVertexSourceRelation@4138f0c6\n                              +- Project [named_struct(src, src#4122, dst, dst#4123, ~label, ~label#4124, id, id#4125, stars, stars#4147, timestamp, timestamp#4148) AS _2#4530]\n                                 +- Filter ~label#4124 IN (rated)\n                                    +- Union\n                                       :- Project [src#4122, dst#4123, ~label#4124, id#4125, stars#4147, timestamp#4148]\n                                       :  +- Project [src#4122, dst#4123, ~label#4124, id#4125, stars#4147, timestamp#4148]\n                                       :     +- Project [concat_ws(:, user, base64(if ((isnull(community_id#4126) || isnull(member_id#4127L))) null else UDF(community_id#4126, member_id#4127L))) AS src#4122, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4130 as int))) null else UDF(cast(~~adjacent_label_id#4130 as int)), base64(~~adjacent_vertex_id#4129)) AS dst#4123, if (isnull(~~edge_label_id#4128)) null else UDF(~~edge_label_id#4128) AS ~label#4124, ~~edge_id#4131 AS id#4125, ~stars#4132 AS stars#4147, ~timestamp#4133 AS timestamp#4148]\n                                       :        +- Filter ((~~edge_label_id#4128 % 2) = 0)\n                                       :           +- Relation[community_id#4126,member_id#4127L,~~edge_label_id#4128,~~adjacent_vertex_id#4129,~~adjacent_label_id#4130,~~edge_id#4131,~stars#4132,~timestamp#4133,~~edge_exists#4134,~~simple_edge_id#4135] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                                       :- Project [src#4157, dst#4158, ~label#4159, id#4160, stars#4254, timestamp#4255]\n                                       :  +- Project [src#4157, dst#4158, ~label#4159, id#4160, cast(stars#4178 as string) AS stars#4254, cast(timestamp#4179 as string) AS timestamp#4255]\n                                       :     +- Project [concat_ws(:, genre, base64(if ((isnull(community_id#4161) || isnull(member_id#4162L))) null else UDF(community_id#4161, member_id#4162L))) AS src#4157, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4165 as int))) null else UDF(cast(~~adjacent_label_id#4165 as int)), base64(~~adjacent_vertex_id#4164)) AS dst#4158, if (isnull(~~edge_label_id#4163)) null else UDF(~~edge_label_id#4163) AS ~label#4159, ~~edge_id#4166 AS id#4160, null AS stars#4178, null AS timestamp#4179]\n                                       :        +- Filter ((~~edge_label_id#4163 % 2) = 0)\n                                       :           +- Relation[community_id#4161,member_id#4162L,~~edge_label_id#4163,~~adjacent_vertex_id#4164,~~adjacent_label_id#4165,~~edge_id#4166,~~edge_exists#4167,~~simple_edge_id#4168] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                                       :- Project [src#4188, dst#4189, ~label#4190, id#4191, cast(stars#4209 as string) AS stars#4263, cast(timestamp#4210 as string) AS timestamp#4264]\n                                       :  +- Project [concat_ws(:, occupation, base64(if ((isnull(community_id#4192) || isnull(member_id#4193L))) null else UDF(community_id#4192, member_id#4193L))) AS src#4188, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4196 as int))) null else UDF(cast(~~adjacent_label_id#4196 as int)), base64(~~adjacent_vertex_id#4195)) AS dst#4189, if (isnull(~~edge_label_id#4194)) null else UDF(~~edge_label_id#4194) AS ~label#4190, ~~edge_id#4197 AS id#4191, null AS stars#4209, null AS timestamp#4210]\n                                       :     +- Filter ((~~edge_label_id#4194 % 2) = 0)\n                                       :        +- Relation[community_id#4192,member_id#4193L,~~edge_label_id#4194,~~adjacent_vertex_id#4195,~~adjacent_label_id#4196,~~edge_id#4197,~~edge_exists#4198,~~simple_edge_id#4199] org.apache.spark.sql.cassandra.CassandraSourceRelation\n                                       +- Project [concat_ws(:, movie, base64(if ((isnull(community_id#4223) || isnull(member_id#4224L))) null else UDF(community_id#4223, member_id#4224L))) AS src#4219, concat_ws(:, if (isnull(cast(~~adjacent_label_id#4227 as int))) null else UDF(cast(~~adjacent_label_id#4227 as int)), base64(~~adjacent_vertex_id#4226)) AS dst#4220, if (isnull(~~edge_label_id#4225)) null else UDF(~~edge_label_id#4225) AS ~label#4221, ~~edge_id#4228 AS id#4222, ~stars#4229 AS stars#4244, ~timestamp#4230 AS timestamp#4245]\n                                          +- Filter ((~~edge_label_id#4225 % 2) = 0)\n                                             +- Relation[community_id#4223,member_id#4224L,~~edge_label_id#4225,~~adjacent_vertex_id#4226,~~adjacent_label_id#4227,~~edge_id#4228,~stars#4229,~timestamp#4230,~~edge_exists#4231,~~simple_edge_id#4232] org.apache.spark.sql.cassandra.CassandraSourceRelation\n\n  at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:88)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:85)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)\n  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:288)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:306)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:187)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:304)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:268)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:268)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpression$1(QueryPlan.scala:279)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:289)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$6.apply(QueryPlan.scala:298)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:187)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions(QueryPlan.scala:298)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:268)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:85)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:78)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:78)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:91)\n  at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:52)\n  at org.apache.spark.sql.Dataset.<init>(Dataset.scala:164)\n  at org.apache.spark.sql.Dataset.<init>(Dataset.scala:170)\n  at org.apache.spark.sql.Dataset$.apply(Dataset.scala:61)\n  at org.apache.spark.sql.Dataset.withTypedPlan(Dataset.scala:2877)\n  at org.apache.spark.sql.Dataset.filter(Dataset.scala:1304)\n  ... 147 elided\n"}]},"apps":[],"jobName":"paragraph_1524670160274_1283405771","id":"20180425-182920_735716612","dateCreated":"2018-04-25T18:29:20+0300","dateStarted":"2018-05-02T23:21:04+0300","dateFinished":"2018-05-02T23:21:10+0300","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:336"},{"text":"%md ## Mix with OLTP","user":"anonymous","dateUpdated":"2018-04-26T12:07:29+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Mix with OLTP</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1524670179034_2025632371","id":"20180425-182939_1764319141","dateCreated":"2018-04-25T18:29:39+0300","dateStarted":"2018-04-26T12:07:29+0300","dateFinished":"2018-04-26T12:07:29+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:337"},{"text":"import com.datastax.spark.connector.cql.CassandraConnector\nimport com.datastax.driver.dse.DseSession\nimport com.datastax.driver.dse.graph.SimpleGraphStatement\n\nval connector = CassandraConnector(spark.sparkContext.getConf)\n\nval graphName = \"tree\"\nval g = spark.dseGraph(graphName)\n\nval root_nodes = g.V().hasLabel(\"root\").df.select(\"obj_id\")\nroot_nodes.foreachPartition(\n  rows => {\n    connector.withSessionDo ({ s =>\n        val session = s.asInstanceOf[DseSession]\n        for (row <- rows) {\n          val root_id = row.getLong(0)\n\n          val gremlin = \"\"\"\n            g.V(['~label':'root', 'root_id': root_id ])\n              .as('x')\n              .repeat(\n                __.in()\n                .property('root_id', select('x').by('_id'))\n              )\n              .times(6)\n          \"\"\"  \n          val stmt = new SimpleGraphStatement(gremlin)\n             .set(\"root_id\",root_id).setGraphName(graphName)\n          val results = session.executeGraph(stmt).all()\n        }\n    })\n  }\n)\n","user":"anonymous","dateUpdated":"2018-04-26T12:19:59+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524733649249_544555735","id":"20180426-120729_1496362447","dateCreated":"2018-04-26T12:07:29+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:338"},{"text":"%md ## implement cycles for DGF ","user":"anonymous","dateUpdated":"2018-04-26T12:36:25+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>implement cycles for DGF</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1524735353005_417444626","id":"20180426-123553_299407949","dateCreated":"2018-04-26T12:35:53+0300","dateStarted":"2018-04-26T12:36:25+0300","dateFinished":"2018-04-26T12:36:25+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:339"},{"text":"for (i <- 1 to 6 ) {\n    val updates = g.V().has(\"root_id\").as(\"t\").\n        in().hasNot(\"root_id\").as(\"f\").\n        select(\"f\", \"t\").\n        select($\"f.id\" as \"id\", $\"t.root_id\" as \"root_id\")\n    g.updateVertices(updates)   \n}","user":"anonymous","dateUpdated":"2018-04-26T12:37:44+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524735384889_1577493208","id":"20180426-123624_160642311","dateCreated":"2018-04-26T12:36:24+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:340"},{"text":"%md ## Super node detector","user":"anonymous","dateUpdated":"2018-05-02T21:22:13+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Super node detector</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1525285287554_1968667053","id":"20180502-212127_785333128","dateCreated":"2018-05-02T21:21:27+0300","dateStarted":"2018-05-02T21:22:13+0300","dateFinished":"2018-05-02T21:22:16+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:341"},{"text":"val superNodes=g.degrees.orderBy($\"degree\".desc).limit(10)\nz.show(superNodes)","user":"anonymous","dateUpdated":"2018-05-02T21:28:46+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","degree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}},"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","degree":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala","editOnDblClick":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"superNodes: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [id: string, degree: int]\n"},{"type":"TABLE","data":"id\tdegree\nmovie:EmY8gAAAAAAAAACF\t3430\nmovie:eHraAAAAAAAAAAAR\t2995\nmovie:cx1ogAAAAAAAAAAy\t2995\nmovie:fgnNAAAAAAAAAACI\t2888\nmovie:Avl3gAAAAAAAAAAU\t2675\nmovie:FukUAAAAAAAAAAB7\t2656\nmovie:SA68AAAAAAAAAAAR\t2652\nmovie:MnVDAAAAAAAAAABK\t2593\nmovie:ReeAgAAAAAAAAABq\t2585\nmovie:SA68AAAAAAAAAAAV\t2580\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=60"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1525285338842_-103713117","id":"20180502-212218_2064720546","dateCreated":"2018-05-02T21:22:18+0300","dateStarted":"2018-05-02T21:28:32+0300","dateFinished":"2018-05-02T21:28:37+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:342"},{"text":"%md ## Naive NGDG Migration","user":"anonymous","dateUpdated":"2018-04-29T13:22:35+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Naive NGDG Migration</h2>\n</div>"}]},"apps":[],"jobName":"paragraph_1524997271767_-210005885","id":"20180429-132111_1157066845","dateCreated":"2018-04-29T13:21:11+0300","dateStarted":"2018-04-29T13:22:35+0300","dateFinished":"2018-04-29T13:22:35+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:343"},{"text":"val old = spark.dseGraph(\"gods\")\nz.show(old.V.df)","user":"anonymous","dateUpdated":"2018-04-29T13:33:46+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"id","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"~label","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"community_id","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"member_id","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"name","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"age","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"nicknames","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"id":"string","~label":"string","community_id":"string","member_id":"string","name":"string","age":"string","nicknames":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"old: com.datastax.bdp.graph.spark.graphframe.DseGraphFrame = com.datastax.bdp.graph.spark.graphframe.DseGraphFrame@2c30ab68\n"},{"type":"TABLE","data":"id\t~label\tcommunity_id\tmember_id\tname\tage\tnicknames\ntitan:fY+cAAAAAAAAAAAA\ttitan\t2106563584\t0\tsaturn\t10000\tnull\ntitan:X4TWgAAAAAAAAAAA\ttitan\t1602541184\t0\trhea\t10000\tnull\ntitan:bxAYAAAAAAAAAAAA\ttitan\t1863325696\t0\toceanus\t10000\tnull\ndemigod:a2DCAAAAAAAAAAAA\tdemigod\t1801503232\t0\thercules\t30\tnull\nmonster:CqHJgAAAAAAAAAAA\tmonster\t178375040\t0\thydra\tnull\tnull\nmonster:F86CAAAAAAAAAAAC\tmonster\t399409664\t2\tcerberus\tnull\tnull\nmonster:ReeAgAAAAAAAAAAC\tmonster\t1172799616\t2\tnemean\tnull\tnull\nhuman:cx1ogAAAAAAAAAAA\thuman\t1931307136\t0\tandromeda\t45\tnull\nhuman:fgnNAAAAAAAAAAAC\thuman\t2114571520\t2\talcmene\t45\tnull\nhuman:XOYwgAAAAAAAAAAA\thuman\t1558589568\t0\telectryon\t45\tnull\ngod:ESTwgAAAAAAAAAAB\tgod\t287633536\t1\tpluto\t4000\tnull\ngod:AaOlgAAAAAAAAAAA\tgod\t27501952\t0\tneptune\t4500\tWrappedArray([Nemo,null], [Neppy,1970-01-01 03:00:00.022], [Flipper,1970-01-01 03:00:00.025])\ngod:Q2rjAAAAAAAAAAAB\tgod\t1131078400\t1\tminerva\t5000\tnull\ngod:NMONAAAAAAAAAAAA\tgod\t885230848\t0\tjuno\t5000\tnull\ngod:aJ0wgAAAAAAAAAAA\tgod\t1755132032\t0\tjupiter\t5000\tWrappedArray([a,null], [b,null])\nlocation:XdftAAAAAAAAAAAA\tlocation\t1574432000\t0\tsky\tnull\tnull\nlocation:fUHsgAAAAAAAAAAB\tlocation\t2101472384\t1\ttartarus\tnull\tnull\nlocation:SPbiAAAAAAAAAAAB\tlocation\t1224139264\t1\tsea\tnull\tnull\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=0","http://10.150.0.248:4041/jobs/job?id=1","http://10.150.0.248:4041/jobs/job?id=2"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1524997269532_-1039139765","id":"20180429-132109_1322563269","dateCreated":"2018-04-29T13:21:09+0300","dateStarted":"2018-04-29T13:32:54+0300","dateFinished":"2018-04-29T13:32:59+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:344"},{"text":"import com.datastax.spark.connector._\nimport org.apache.spark.sql.cassandra._\n\n//verticies \nval v = old.V.df.drop(\"nicknames\").\n    withColumnRenamed(\"~label\", \"label\")\nv.createCassandraTable (\"pgods\", \"df\")\nv.write.cassandraFormat(\"df\", \"pgods\").save()\n\n// edges with proper column names\nval e = old.E.df.\n    withColumnRenamed(\"src\", \"out_id\").\n    withColumnRenamed(\"dst\", \"in_id\").\n    withColumnRenamed(\"~label\", \"label\")\ne.createCassandraTable (\"pgods\", \"df_edge_df\",\n    partitionKeyColumns = Some(Seq(\"out_id\")), \n    clusteringKeyColumns = Some(Seq(\"in_id\")))\ne.write.cassandraFormat(\"df_edge_df\", \"pgods\").save()\n","user":"anonymous","dateUpdated":"2018-04-29T18:45:20+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.datastax.spark.connector._\nimport org.apache.spark.sql.cassandra._\nv: org.apache.spark.sql.DataFrame = [id: string, label: string ... 4 more fields]\ne: org.apache.spark.sql.DataFrame = [out_id: string, in_id: string ... 5 more fields]\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=21","http://10.150.0.248:4041/jobs/job?id=22","http://10.150.0.248:4041/jobs/job?id=23","http://10.150.0.248:4041/jobs/job?id=24","http://10.150.0.248:4041/jobs/job?id=25","http://10.150.0.248:4041/jobs/job?id=26"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1524997384212_20210230","id":"20180429-132304_786546894","dateCreated":"2018-04-29T13:23:04+0300","dateStarted":"2018-04-29T18:30:43+0300","dateFinished":"2018-04-29T18:30:51+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:345"},{"text":"val ng = GraphFrame (spark.sql(\"select * from pgods.df\"), \n    spark.sql(\"select * from pgods.df_edge_df\").withColumnRenamed(\"out_id\", \"src\").withColumnRenamed(\"in_id\", \"dst\"))\nng.V().out().out().count().show","user":"anonymous","dateUpdated":"2018-04-29T18:37:00+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ng: org.graphframes.GraphFrame = GraphFrame(v:[id: string, age: int ... 4 more fields], e:[src: string, dst: string ... 5 more fields])\n+-----+\n|count|\n+-----+\n|   43|\n+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.150.0.248:4041/jobs/job?id=31"],"interpreterSettingId":"2CUPJSYQE"}},"apps":[],"jobName":"paragraph_1524998045190_-542713516","id":"20180429-133405_1764129649","dateCreated":"2018-04-29T13:34:05+0300","dateStarted":"2018-04-29T18:37:00+0300","dateFinished":"2018-04-29T18:37:07+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:346"},{"text":"// minimum set of vertex colunmn is labels a and custom id\ng.updateVertices(\n    newV.select ($\"custmomId\", $\"~label\"))\ng.updateEdges (newE.select(\n    g.columnId($\"src_label\", $\"src_id\") as \"src\", \n    g.columnId($\"dst_label\", $\"dst_id\") as \"dst\",\n    // edge UUID id is optional and needed only for indeponent insert of multi-edges\n    $\"id\"\n    ))    \n\n    ","user":"anonymous","dateUpdated":"2018-05-01T15:29:22+0300","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1525015892501_-611516439","id":"20180429-183132_1814125128","dateCreated":"2018-04-29T18:31:32+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:347"}],"name":"Spark","id":"2CX9V6HGC","angularObjects":{"2CVHA3GYU:shared_process":[],"2CUPJSYQE:shared_process":[],"2CUSV73SH:shared_process":[],"2CRYHYACN:shared_process":[],"2CV2XUSYR:shared_process":[],"2CRWAUJG3:shared_process":[],"2CSHUE6PH:shared_process":[],"2CUN26BJE:shared_process":[],"2CV3YJ6RF:shared_process":[],"2CSWKJZW1:shared_process":[],"2CUWVRD39:shared_process":[],"2CSXUK591:shared_process":[],"2CSKPDGUG:shared_process":[],"2CSVM8WKT:shared_process":[],"2CTH1HWGU:shared_process":[],"2CU8N3A5H:shared_process":[],"2CTHQC5S8:shared_process":[],"2CTNEVX5Y:shared_process":[],"2CT1SDE1U:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}